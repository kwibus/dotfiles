-- lambda in prompt
-- :set prompt  "λ: "

-- :set prompt "\ESC[34m\STX%s > \ESC[m\STX"
:set prompt "\ESC[0;34m\STX%s\n\ESC[1;31m\STXλ> \ESC[m\STX"


-- warning messages
:set -Wall  -fwarn-tabs -fwarn-monomorphism-restriction -fwarn-unused-do-bind

-- include src test directory
:set -isrc -itests

let ghciEscapeShellArg arg = "'" ++ concatMap (\x -> if x == '\'' then "'\"'\"'" else [x]) arg ++ "'"

:def Hlint const . return $ ":! hlint \"src\""

:def! Documentation return.(":!haskell-docs " ++ )
:def! Hoogle return . (":! hoogle --color --count=20 " ++) . ghciEscapeShellArg

:def! Description return . (":! hoogle --info --color " ++) . ghciEscapeShellArg

-- :def! Step  const $ return ":step \n :list"
:set stop :list
:def Pretty \_ -> return ("import Text.Show.Pretty (pPrint, ppShow)\n:set -interactive-print pPrint")
:def No-pretty \_ -> return (":set -interactive-print System.IO.print")


-- heap view
:def! setPrintHeapDepth \x -> return $ ":def! printHeap \\x -> return $ \"GHC.HeapView.buildHeapGraph (" ++ x ++ ") () (GHC.HeapView.asBox (\" ++ x ++ \")) >>= putStrLn . GHC.HeapView.ppHeapGraph\""

:setPrintHeapDepth 1000
:set -fbreak-on-exception

